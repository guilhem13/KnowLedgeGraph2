import ast
import glob
import os
import re
from threading import local
"""
from bdd.manager_bdd import session_creator
from bdd.paper_model_orm import PapierORM
from knowledgegraph.controller import Data
from knowledgegraph.controller.treatment.processingpipeline import Textprocessed
from knowledgegraph.models import Entity, Papier


a ="[1] K. J. Astrom and B. M. Appendices Bernhardsson, Comparison of riemann and lebesgue sampling for first order stochastic systems, in Proceedings of the 41st IEEE Conference on Decision and Control, 2002., vol. 2, pp. 20112016, IEEE, 2002.  [2] P. Tabuada, Event-triggered real-time scheduling of stabilizing control tasks, IEEE Transactions on Automatic Control, vol. 52, no. 9, pp. 16801685, 2007.  [3] A. S. Kolarijani and M. Mazo, Formal traffic characterization of lti event-triggered control systems, IEEE Transactions on Control of Network Systems, vol. 5, no. 1, pp. 274283, 2016.  [4] P. Tabuada, Verification and control of hybrid systems: a symbolic  approach. Springer Science & Business Media, 2009.  [5] G. d. A. Gleizer and M. Mazo Jr, Scalable traffic models for scheduling of linear periodic event-triggered controllers, IFAC-PapersOnLine, vol. 53, no. 2, pp. 27262732, 2020.  [6] G. d. A. Gleizer and M. Mazo, Towards traffic bisimulation of linear periodic event-triggered controllers, IEEE Control Systems Letters, vol. 5, no. 1, pp. 2530, 2020.  [7] G. de A. Gleizer and M. Mazo Jr, Computing the sampling performance of event-triggered control, in Proceedings of the 24th International Conference on Hybrid Systems: Computation and Control, pp. 17, 2021.  [8] G. Delimpaltadakis, G. de Albuquerque Gleizer, I. van Straalen, and M. Mazo Jr., Etcetera: beyond event-triggered control, in Proceedings of the 25th International Conference on Hybrid Systems: Computation and Control, 2022.  [9] M. Cubuktepe, N. Jansen, S. Junges, J.-P. Katoen, and U. Topcu, Scenario-based verification of uncertain mdps, in International Conference on Tools and Algorithms for the Construction and Analysis of Systems, pp. 287305, Springer, 2020.  [10] T. S. Badings, A. Abate, N. Jansen, D. Parker, H. A. Poonawala, and M. Stoelinga, Sampling-based robust control of autonomous systems with non-gaussian noise, arXiv preprint arXiv:2110.12662, 2021. [11] M. Campi and S. Garatti, The exact feasibility of randomized solutions of uncertain convex programs, SIAM Journal on Optimization, vol. 19, no. 3, pp. 12111230, 2008.  [12] M. C. Campi, S. Garatti, and F. A. Ramponi, A general scenario theory for nonconvex optimization and decision making, IEEE Transactions on Automatic Control, vol. 63, no. 12, pp. 40674078, 2018. [13] S. Garatti and M. C. Campi, Risk and complexity in scenario  optimization, Mathematical Programming, pp. 137, 2019.  [14] M. C. Campi and S. Garatti, Scenario optimization with relaxation: a new tool for design and application to machine learning problems, in 2020 59th IEEE Conference on Decision and Control (CDC), pp. 24632468, IEEE, 2020.  [15] W. H. Heemels, M. Donkers, and A. R. Teel, Periodic event-triggered control for linear systems, IEEE Transactions on automatic control, vol. 58, no. 4, pp. 847861, 2012.  [16] G. de Albuquerque Gleizer and M. Mazo Jr, Chaos and order in  event-triggered control, arXiv e-prints, 2022.  [17] K. Chatterjee, L. Doyen, and T. A. Henzinger, Quantitative languages, ACM Transactions on Computational Logic (TOCL), vol. 11, no. 4, pp. 138, 2010.  [18] R. M. Karp, A characterization of the minimum cycle mean in a  digraph, Discrete mathematics, vol. 23, no. 3, pp. 309311, 1978.  [19] J. Weston and C. Watkins, Multi-class support vector machines, tech.  rep., Citeseer, 1998.  [20] M. Mazo, A. Anta, and P. Tabuada, On self-triggered control for linear systems: Guarantees and complexity, in 2009 European Control Conference (ECC), pp. 37673772, IEEE, 2009.  [21] C.-W. Hsu and C.-J. Lin, A comparison of methods for multiclass support vector machines, IEEE transactions on Neural Networks, vol. 13, no. 2, pp. 415425, 2002.  [22] K. Crammer and Y. Singer, On the algorithmic implementation of multiclass kernel-based vector machines, Journal of machine learning research, vol. 2, no. Dec, pp. 265292, 2001.  \x0c"
forbidden_part =['Appendices','Supplementary Material','Supplementary material']
#print(Text(a).entities)

res = [a[40:].find(ele) for ele in forbidden_part 

processor = Textprocessed("https://arxiv.org/pdf/2203.09114v1.pdf") #before  data.link[0]        
text_processed = processor.get_data_from_pdf()
#print(text_processed)
print(text_processed)
res = processor.find_entites_based_on_regex(text_processed)
print(len(res))

def find_regex_style(regexstyle, text):        
  regexp = re.compile(regexstyle)
  return regexp.findall(text)

def check_doublon (listcorrect, listaverifier):
  for i in range(len(listaverifier)): 
    for j in range(len(listcorrect)): 
      if listaverifier[i] in listcorrect[j]:
        listaverifier[i] = "TOREMOVE"
  listaverifier = [x for x in listaverifier if x != "TOREMOVE"]
  return listaverifier

def get_sec_format(text): #APA style , 
  result=[] 
  template_one = find_regex_style("[A-Z][a-z]+,\s[A-Z]\.[A-Z]\.[A-Z]\.",text) #Johnson, D. D. P.
  template_two= find_regex_style("[A-Z][a-z]+,\s[A-Z]\.[A-Z]\.",text) #Johnson, D. D.
  template_three= find_regex_style("[A-Z][a-z]+,\s[A-Z]\.",text) #Johnson, D.

  #print(text)
  print(len(template_one))
  print(len(template_three))
  print(template_two)

  if len(template_one)>0:
    result += template_one
  if len(template_two)>0:
    if len(result)>0:
      template_two = check_doublon(result,  template_two)
      template_two = list(set(template_two))
      result = result + template_two
    else: 
      result+=template_two
  if len(template_three)>0:
    if len(result)>0:
       template_three = check_doublon(result,  template_three)
       template_three = list(set(template_three))
       result = result + template_three
    else: 
       result+=template_three
      
  return result

print(get_sec_format(text_processed))

session = session_creator()
# User is the name of table that has a column name
papers = session.query(PapierORM).filter().limit(5).all()
print(len(papers))


def convert_dict_to_entities(stringdict):
    entities_list = []
    res = ast.literal_eval(stringdict)
    for item in res: 
        p = Entity()   
        p.set_prenom(item['prenom'])
        p.set_nom(item['nom'])
        entities_list.append(p)

    return entities_list

papers = session.query(PapierORM).all()
paper_list = []
for paper in papers :
    paper_list.append(Papier(paper.title,paper.doi,convert_dict_to_entities(paper.authors),paper.link,paper.summary,paper.data_published))


p = Entity()   
p.set_prenom('prenom')
p.set_nom('nom')

a = Entity()   
a.set_prenom('prenom')
a.set_nom('nom')


files = glob.glob('knowledgegraph/file/*.pdf', recursive=True)

for f in files:
    try:
        os.remove(f)
    except OSError as e:
        print("Error: %s : %s" % (f, e.strerror))

from refextract import extract_references_from_file
references = extract_references_from_file('1810.04805.pdf')
listreferences = []
print(references)
for item in references:
    result =""
    if 'raw_ref' in item.keys(): 
        result.append(item['raw_ref'])
    if 'year' in item.keys():
        result += "&!&"
        result.append
    listreferences.append(item['raw_ref']) 

print(listreferences)
files = glob.glob('knowledgegraph/file/*.pdf', recursive=True)
for f in files:
    try:
        os.remove(f)
    except OSError as e:
        print("Error: %s : %s" % (f, e.strerror))

dict ={}

persons_objects =[]
organisations_objects =['azeaaedaaeded','adedafdeda','afefefedcfdc']
lists = ['persons_objects','organisations_objects']
output = {}
data = {listname: locals()[listname] for listname in lists}


p = Entity()   
p.set_prenom('prenom1')
p.set_nom('nom1')

a = Entity()   
a.set_prenom('prenom1')
a.set_nom('nom1')


vv = []
vv.append(p)
vv.append(a)

data['Personne'] = []
for i in range(len(vv)): 
    data['Personne'].append(vv[i].__dict__)

dict['chunk_1']=data
print(dict)

with open('abc.json', 'w') as outfile:
    json.dump(data, outfile, indent=4)

import glob
import os

files = glob.glob("knowledgegraph/file/*.pdf", recursive=True)

for f in files:
    try:
        os.remove(f)
    except OSError as e:
        print("Error: %s : %s" % (f, e.strerror))

for i in range(0, 17, 5):
    print(i)"""

import json 
a =json.dumps(['{"link": "http://arxiv.org/pdf/2203.06419v1", "doi": "2203.06419v1", "entities_include_in_text": ["Roberts and\\nKreuz, 1994", "Colston, 1997", "Colston and Keller,\\n1998", "Ivanko and Pexman, 2003", "Olkoniemi et al., 2016", "Wellman, 2014", "Ghosh et al., 2018; Castro et al.,\\n2019; Oraby et al., 2017; Bedi et al., 2021", "Mishra et al., 2019;\\nDubey et al., 2019; Chakrabarty et al., 2020", "Bedi\\net al., 2021", "Kreuz and Caucci, 2007; Tsur et al., 2010", "Tay et al., 2018; Xiong et al., 2019; Srivastava\\net al., 2020", "Abu Farha and Magdy, 2020", "Ortega-Bueno et al., 2019", "Cignarella et al., 2018", "Cai et al.,\\n2019; Xu et al., 2020; Pan et al., 2020", "Castro et al., 2019; Bedi et al., 2021", "Bedi et al., 2021", "Lin,\\n2004", "Papineni et al., 2002", "Denkowski and Lavie, 2014", "Zhang et al., 2019", "Eyben et al., 2016", "Vaswani et al., 2017", "Hara et al., 2018", "Kay et al., 2017", "Vaswani et al.,\\n2017", "Vaswani et al.,\\n2017", "See et al., 2017", "Lewis et al., 2020", "Liu et al., 2020", "Attardo et al., 2003; Tabacaru and Lem-\\nmens, 2014", "Rock-\\nwell, 2007", "Attardo et al.,\\n2003", "EVALITA 2018", "IberLEF 2019", "SEPLN 2019", "Wang\\net al., 2018", "Rajpurkar et al., 2016)"], "entities_from_reference": [{"prenom": "Marilyn", "nom": "Walker", "name": "WalkerMarilyn"}, {"prenom": "Weiping", "nom": "Wang", "name": "WangWeiping"}, {"prenom": "Klaus R.", "nom": "Scherer", "name": "SchererKlaus R."}, {"prenom": "Luke", "nom": "Zettlemoyer", "name": "ZettlemoyerLuke"}, {"prenom": "Roger J.", "nom": "Kreuz", "name": "KreuzRoger J."}, {"prenom": "Lidia S.", "nom": "Chao", "name": "ChaoLidia S."}, {"prenom": "Pushpak", "nom": "Bhattacharyya", "name": "BhattacharyyaPushpak"}, {"prenom": "Richard M.", "nom": "Roberts", "name": "RobertsRichard M."}, {"prenom": "Processing", "nom": "Tools", "name": "ToolsProcessing"}, {"prenom": "Machine", "nom": "Intelligence", "name": "IntelligenceMachine"}, {"prenom": "n-Yew", "nom": "Lin", "name": "Linn-Yew"}, {"prenom": "Manish", "nom": "Shrivastava", "name": "ShrivastavaManish"}, {"prenom": "Saurabh", "nom": "Srivastava", "name": "SrivastavaSaurabh"}, {"prenom": "Herbert L.", "nom": "Colston", "name": "ColstonHerbert L."}, {"prenom": "Henry M", "nom": "Wellman", "name": "WellmanHenry M"}, {"prenom": "Bjorn W.", "nom": "Schuller", "name": "SchullerBjorn W."}, {"prenom": "Illia", "nom": "Polosukhin", "name": "PolosukhinIllia"}, {"prenom": "Smaranda", "nom": "Muresan", "name": "MuresanSmaranda"}, {"prenom": "Christopher D.", "nom": "Manning", "name": "ManningChristopher D."}, {"prenom": "Khiet P.", "nom": "Truong", "name": "TruongKhiet P."}, {"prenom": "Soujanya", "nom": "Poria", "name": "PoriaSoujanya"}, {"prenom": "Ari", "nom": "Rappoport", "name": "RappoportAri"}, {"prenom": "Gina", "nom": "Caucci", "name": "CaucciGina"}, {"prenom": "Penny M.", "nom": "Pexman", "name": "PexmanPenny M."}, {"prenom": "Yoav", "nom": "Artzi", "name": "ArtziYoav"}, {"prenom": "Shauna B", "nom": "Keller", "name": "KellerShauna B"}, {"prenom": "Xiaojun", "nom": "Wan", "name": "WanXiaojun"}, {"prenom": "Kilian Q", "nom": "Weinberger", "name": "WeinbergerKilian Q"}, {"prenom": "Maarten", "nom": "Lemmens", "name": "LemmensMaarten"}, {"prenom": "nier", "nom": "Ortega-Bueno", "name": "Ortega-Buenonier"}, {"prenom": "Yutaka", "nom": "Satoh", "name": "SatohYutaka"}, {"prenom": "Andrew", "nom": "Zisserman", "name": "ZissermanAndrew"}, {"prenom": "Alexander R.", "nom": "Fabbri", "name": "FabbriAlexander R."}, {"prenom": "Yihui", "nom": "Yang", "name": "YangYihui"}, {"prenom": "Isabella", "nom": "Poggi", "name": "PoggiIsabella"}, {"prenom": "Mark J.", "nom": "Carman", "name": "CarmanMark J."}, {"prenom": "Tanmoy", "nom": "Chakraborty", "name": "ChakrabortyTanmoy"}, {"prenom": "Derek F.", "nom": "Wong", "name": "WongDerek F."}, {"prenom": "Nanyun", "nom": "Peng", "name": "PengNanyun"}, {"prenom": "Walid", "nom": "Magdy", "name": "MagdyWalid"}, {"prenom": "is-Philippe", "nom": "Morency", "name": "Morencyis-Philippe"}, {"prenom": "Shrikanth S.", "nom": "Narayanan", "name": "NarayananShrikanth S."}, {"prenom": "Alon", "nom": "Lavie", "name": "LavieAlon"}, {"prenom": "Ehsan", "nom": "Hoque", "name": "HoqueEhsan"}, {"prenom": "Roi", "nom": "Reichart", "name": "ReichartRoi"}, {"prenom": "Stacey L.", "nom": "Ivanko", "name": "IvankoStacey L."}, {"prenom": "Karthik", "nom": "Sankaranarayanan", "name": "SankaranarayananKarthik"}, {"prenom": "Social", "nom": "Media", "name": "MediaSocial"}, {"prenom": "Wenji", "nom": "Mao", "name": "MaoWenji"}, {"prenom": "Peter J.", "nom": "Liu", "name": "LiuPeter J."}, {"prenom": "Percy", "nom": "Liang", "name": "LiangPercy"}, {"prenom": "Samuel R", "nom": "Bowman", "name": "BowmanSamuel R"}, {"prenom": "Laurence Y.", "nom": "Devillers", "name": "DevillersLaurence Y."}, {"prenom": "Aidan N", "nom": "Gomez", "name": "GomezAidan N"}, {"prenom": "Johanna K", "nom": "Kaakinen", "name": "KaakinenJohanna K"}, {"prenom": "S.", "nom": "org", "name": "orgS."}, {"prenom": "Abdelrahman", "nom": "Mohamed", "name": "MohamedAbdelrahman"}, {"prenom": "Yinhan", "nom": "Liu", "name": "LiuYinhan"}, {"prenom": "Naman", "nom": "Goyal", "name": "GoyalNaman"}, {"prenom": "Sergey", "nom": "Edunov", "name": "EdunovSergey"}, {"prenom": "Mike", "nom": "Lewis", "name": "LewisMike"}, {"prenom": "Veselin", "nom": "Stoyanov", "name": "StoyanovVeselin"}, {"prenom": "Omer", "nom": "Levy", "name": "LevyOmer"}, {"prenom": "Marjan", "nom": "Ghazvininejad", "name": "GhazvininejadMarjan"}, {"prenom": "Veronica", "nom": "PerezRosas", "name": "PerezRosasVeronica"}, {"prenom": "Tim", "nom": "Green", "name": "GreenTim"}, {"prenom": "Trevor", "nom": "Back", "name": "BackTrevor"}, {"prenom": "Rada", "nom": "Mihalcea", "name": "MihalceaRada"}, {"prenom": "Roger", "nom": "Zimmermann", "name": "ZimmermannRoger"}, {"prenom": "Paul", "nom": "Natsev", "name": "NatsevPaul"}, {"prenom": "Santiago", "nom": "Castro", "name": "CastroSantiago"}, {"prenom": "Fabio", "nom": "Viola", "name": "ViolaFabio"}, {"prenom": "Mustafa", "nom": "Suleyman", "name": "SuleymanMustafa"}, {"prenom": "Devamanyu", "nom": "Hazarika", "name": "HazarikaDevamanyu"}, {"prenom": "Ellen", "nom": "Riloff", "name": "RiloffEllen"}, {"prenom": "Amita", "nom": "Misra", "name": "MisraAmita"}, {"prenom": "Hongliang", "nom": "Pan", "name": "PanHongliang"}, {"prenom": "Shereen", "nom": "Oraby", "name": "OrabyShereen"}, {"prenom": "Vrindavan", "nom": "Harrison", "name": "HarrisonVrindavan"}, {"prenom": "Zheng", "nom": "Lin", "name": "LinZheng"}, {"prenom": "Vaibhav", "nom": "Varshney", "name": "VarshneyVaibhav"}, {"prenom": "Surabhi", "nom": "Kumari", "name": "KumariSurabhi"}, {"prenom": "Jian", "nom": "Zhang", "name": "ZhangJian"}, {"prenom": "Himani", "nom": "Srivastava", "name": "SrivastavaHimani"}, {"prenom": "Konstantin", "nom": "Lopyrev", "name": "LopyrevKonstantin"}, {"prenom": "Peiran", "nom": "Zhang", "name": "ZhangPeiran"}, {"prenom": "Jennifery", "nom": "Hay", "name": "HayJennifery"}, {"prenom": "Jodi", "nom": "Eisterhold", "name": "EisterholdJodi"}, {"prenom": "Debanjan", "nom": "Ghosh", "name": "GhoshDebanjan"}, {"prenom": "Salvatore", "nom": "Attardo", "name": "AttardoSalvatore"}, {"prenom": "Hongbo", "nom": "Zhu", "name": "ZhuHongbo"}, {"prenom": "Pranav", "nom": "Rajpurkar", "name": "RajpurkarPranav"}, {"prenom": "Tao", "nom": "Xiong", "name": "XiongTao"}, {"prenom": "Tuhin", "nom": "Chakrabarty", "name": "ChakrabartyTuhin"}, {"prenom": "Aditya", "nom": "Joshi", "name": "JoshiAditya"}, {"prenom": "Hirokatsu", "nom": "Kataoka", "name": "KataokaHirokatsu"}, {"prenom": "Oren", "nom": "Tsur", "name": "TsurOren"}, {"prenom": "Huiyu", "nom": "Cai", "name": "CaiHuiyu"}, {"prenom": "Zhixiong", "nom": "Zeng", "name": "ZengZhixiong"}, {"prenom": "Yitao", "nom": "Cai", "name": "CaiYitao"}, {"prenom": "Dmitry", "nom": "Davidov", "name": "DavidovDmitry"}, {"prenom": "Tarun", "nom": "Tater", "name": "TaterTarun"}, {"prenom": "Vinita", "nom": "Sharma", "name": "SharmaVinita"}, {"prenom": "Kensho", "nom": "Hara", "name": "HaraKensho"}, {"prenom": "Abhijit", "nom": "Mishra", "name": "MishraAbhijit"}, {"prenom": "Abhijeet", "nom": "Dubey", "name": "DubeyAbhijeet"}, {"prenom": "Michael", "nom": "Denkowski", "name": "DenkowskiMichael"}, {"prenom": "Abu", "nom": "Farha", "name": "FarhaAbu"}, {"prenom": "Lotem", "nom": "Peled", "name": "PeledLotem"}, {"prenom": "Roger", "nom": "Kreuz", "name": "KreuzRoger"}, {"prenom": "Sabina", "nom": "Tabacaru", "name": "TabacaruSabina"}, {"prenom": "Arabic", "nom": "Corpora", "name": "CorporaArabic"}, {"prenom": "Paolo", "nom": "Rosso", "name": "RossoPaolo"}, {"prenom": "Karen", "nom": "Simonyan", "name": "SimonyanKaren"}, {"prenom": "Niki", "nom": "Parmar", "name": "ParmarNiki"}, {"prenom": "Sangwu", "nom": "Lee", "name": "LeeSangwu"}, {"prenom": "Noam", "nom": "Shazeer", "name": "ShazeerNoam"}, {"prenom": "Carlos", "nom": "Busso", "name": "BussoCarlos"}, {"prenom": "Salim", "nom": "Roukos", "name": "RoukosSalim"}, {"prenom": "Amanpreet", "nom": "Singh", "name": "SinghAmanpreet"}, {"prenom": "Tianyi", "nom": "Zhang", "name": "ZhangTianyi"}, {"prenom": "Will", "nom": "Kay", "name": "KayWill"}, {"prenom": "Varsha", "nom": "Kishore", "name": "KishoreVarsha"}, {"prenom": "Valerio", "nom": "Basile", "name": "BasileValerio"}, {"prenom": "Teresa", "nom": "Cignarella", "name": "CignarellaTeresa"}, {"prenom": "Alex", "nom": "Wang", "name": "WangAlex"}, {"prenom": "Elisabeth", "nom": "Andre", "name": "AndreElisabeth"}, {"prenom": "Todd", "nom": "Ward", "name": "WardTodd"}, {"prenom": "Sahil", "nom": "Swami", "name": "SwamiSahil"}, {"prenom": "Kishore", "nom": "Papineni", "name": "PapineniKishore"}, {"prenom": "Viviana", "nom": "Patti", "name": "PattiViviana"}, {"prenom": "Cristina", "nom": "Bosco", "name": "BoscoCristina"}, {"prenom": "Simona", "nom": "Frenda", "name": "FrendaSimona"}, {"prenom": "Johan", "nom": "Sundberg", "name": "SundbergJohan"}, {"prenom": "Wasifur", "nom": "Rahman", "name": "RahmanWasifur"}, {"prenom)": "Joao", "nom": "Carreira", "name": "CarreiraJoao"}, {"prenom": "Ankush", "nom": "Khandelwal", "name": "KhandelwalAnkush"}, {"prenom": "Julian", "nom": "Michael", "name": "MichaelJulian"}, {"prenom": "Ashish", "nom": "Vaswani", "name": "VaswaniAshish"}, {"prenom": "Kamrul", "nom": "Hasan", "name": "HasanKamrul"}, {"prenom": "Vinay", "nom": "Singh", "name": "SinghVinay"}, {"prenom": "Shivani", "nom": "Kumar", "name": "KumarShivani"}, {"prenom": "Petri", "nom": "Laukka", "name": "LaukkaPetri"}, {"prenom": "Manjot", "nom": "Bedi", "name": "BediManjot"}, {"prenom": "Amir", "nom": "Zadeh", "name": "ZadehAmir"}, {"prenom": "Baosong", "nom": "Yang", "name": "YangBaosong"}, {"prenom": "Jakob", "nom": "Uszkoreit", "name": "UszkoreitJakob"}, {"prenom": "Henri", "nom": "Ranta", "name": "RantaHenri"}, {"prenom": "Hernandez", "nom": "Faras", "name": "FarasHernandez"}, {"prenom": "Felix", "nom": "Hill", "name": "HillFelix"}, {"prenom": "Julien", "nom": "Epps", "name": "EppsJulien"}, {"prenom": "Henri", "nom": "Olkoniemi", "name": "OlkoniemiHenri"}, {"prenom": "Abigail", "nom": "See", "name": "SeeAbigail"}, {"prenom": "Florian", "nom": "Eyben", "name": "EybenFlorian"}, {"prenom": "Cheung", "nom": "Hui", "name": "HuiCheung"}, {"prenom": "Xing", "nom": "Wang", "name": "WangXing"}, {"prenom": "Shad", "nom": "Akhtar", "name": "AkhtarShad"}, {"prenom": "Asif", "nom": "Ekbal", "name": "EkbalAsif"}, {"prenom": "Sarfaraz", "nom": "Akhtar", "name": "AkhtarSarfaraz"}, {"prenom": "Richard", "nom": "Fabbri", "name": "FabbriRichard"}], "url_in_text": ["ac.in", "https://github.com/LCS2-IIITD/MAF.git", "www.imdb.com/title/tt1518542/", "audeering.github.io/", "github.com/OpenNMT/OpenNMT-py", "huggingface.co/facebook/"], "doi_in_text": ["1805.11869", "1606.05250", "1804.07461"]}', '{"link": "http://arxiv.org/pdf/2203.07372v1", "doi": "2203.07372v1", "entities_include_in_text": ["Apr 1995"], "entities_from_reference": [{"prenom": "Bruno", "nom": "Lepri", "name": "LepriBruno"}, {"prenom": "Luca", "nom": "Pappalardo", "name": "PappalardoLuca"}, {"prenom": "Flow", "nom": "Prediction", "name": "PredictionFlow"}, {"prenom": "Thomas N.", "nom": "Kipf", "name": "KipfThomas N."}, {"prenom": "Guangzhong", "nom": "Sun", "name": "SunGuangzhong"}, {"prenom": "Jose J.", "nom": "Ramasco", "name": "RamascoJose J."}, {"prenom": "Jose J", "nom": "Ramasco", "name": "RamascoJose J"}, {"prenom": "Daniel B.", "nom": "Fambro", "name": "FambroDaniel B."}, {"prenom": "Liang", "nom": "Lin", "name": "LinLiang"}, {"prenom": "Andra", "nom": "Lutu", "name": "LutuAndra"}, {"prenom": "Zhiqiu", "nom": "Huang", "name": "HuangZhiqiu"}, {"prenom": "Marcello", "nom": "Tomasini", "name": "TomasiniMarcello"}, {"prenom": "Vittoria", "nom": "Colizza", "name": "ColizzaVittoria"}, {"prenom": "Wen", "nom": "Dong", "name": "DongWen"}, {"prenom": "Chunhong", "nom": "Zhang", "name": "ZhangChunhong"}, {"prenom": "Ge", "nom": "Chen", "name": "ChenGe"}, {"prenom": "Yann N.", "nom": "Dauphin", "name": "DauphinYann N."}, {"prenom": "Franco", "nom": "Zambonelli", "name": "ZambonelliFranco"}, {"prenom": "Max", "nom": "Welling", "name": "WellingMax"}, {"prenom": "Ryosuke", "nom": "Shibasaki", "name": "ShibasakiRyosuke"}, {"prenom": "Marta C.", "nom": "Gonzalez", "name": "GonzalezMarta C."}, {"prenom": "Charlotte R.", "nom": "James", "name": "JamesCharlotte R."}, {"prenom": "Yubao", "nom": "Liu", "name": "LiuYubao"}, {"prenom": "David", "nom": "Grangier", "name": "GrangierDavid"}, {"prenom": "Zhanxing", "nom": "Zhu", "name": "ZhuZhanxing"}, {"prenom": "Bruce E.", "nom": "Hansen", "name": "HansenBruce E."}, {"prenom": "M. Z. A.", "nom": "Bhuiyan", "name": "BhuiyanM. Z. A."}, {"prenom": "tio-Temporal", "nom": "Data", "name": "Datatio-Temporal"}, {"prenom": "Maya", "nom": "Paczuski", "name": "PaczuskiMaya"}, {"prenom": "ique", "nom": "Frias-Martinez", "name": "Frias-Martinezique"}, {"prenom": "Christian", "nom": "Szegedy", "name": "SzegedyChristian"}, {"prenom": "Zhisong", "nom": "Pan", "name": "PanZhisong"}, {"prenom": "Christian M.", "nom": "Schneider", "name": "SchneiderChristian M."}, {"prenom": "Roberto", "nom": "Pellungrini", "name": "PellungriniRoberto"}, {"prenom": "G. E.", "nom": "Hinton", "name": "HintonG. E."}, {"prenom": "R. R.", "nom": "Salakhutdinov", "name": "SalakhutdinovR. R."}, {"prenom": "X.", "nom": "Zhou", "name": "ZhouX."}, {"prenom": "L.", "nom": "Wang", "name": "WangL."}, {"prenom": "H.", "nom": "Peng", "name": "PengH."}, {"prenom": "Q.", "nom": "Gong", "name": "GongQ."}, {"prenom": "G.", "nom": "Gupta", "name": "GuptaG."}, {"prenom": "S.", "nom": "Wang", "name": "WangS."}, {"prenom": "F.", "nom": "Harary", "name": "HararyF."}, {"prenom": "L.", "nom": "Liu", "name": "LiuL."}, {"prenom": "H.", "nom": "Williams", "name": "WilliamsH."}, {"prenom": "Kota", "nom": "Tsubouchi", "name": "TsubouchiKota"}, {"prenom": "Yitian", "nom": "Jia", "name": "JiaYitian"}, {"prenom": "Pinghua", "nom": "Gong", "name": "GongPinghua"}, {"prenom": "Xianfeng", "nom": "Tang", "name": "TangXianfeng"}, {"prenom": "Chuang", "nom": "Yang", "name": "YangChuang"}, {"prenom": "Quanjun", "nom": "Chen", "name": "ChenQuanjun"}, {"prenom": "Zhaonan", "nom": "Wang", "name": "WangZhaonan"}, {"prenom": "Xuan", "nom": "Song", "name": "SongXuan"}, {"prenom": "Zekun", "nom": "Cai", "name": "CaiZekun"}, {"prenom": "Zipei", "nom": "Fan", "name": "FanZipei"}, {"prenom": "Geng", "nom": "Zhan", "name": "ZhanGeng"}, {"prenom": "Jiajie", "nom": "Zhen", "name": "ZhenJiajie"}, {"prenom": "Lingbo", "nom": "Liu", "name": "LiuLingbo"}, {"prenom": "Luckyson", "nom": "Khaidem", "name": "KhaidemLuckyson"}, {"prenom": "Junbo", "nom": "Zhang", "name": "ZhangJunbo"}, {"prenom": "Yang", "nom": "Zhang", "name": "ZhangYang"}, {"prenom": "Ankit", "nom": "Anand", "name": "AnandAnkit"}, {"prenom": "Huanfa", "nom": "Chen", "name": "ChenHuanfa"}, {"prenom": "Yong", "nom": "Han", "name": "HanYong"}, {"prenom": "Yu", "nom": "Zheng", "name": "ZhengYu"}, {"prenom": "Tao", "nom": "Cheng", "name": "ChengTao"}, {"prenom": "Fan", "nom": "Yang", "name": "YangFan"}, {"prenom": "Massimiliano", "nom": "Luca", "name": "LucaMassimiliano"}, {"prenom": "Yibin", "nom": "Ren", "name": "RenYibin"}, {"prenom": "Genan", "nom": "Dai", "name": "DaiGenan"}, {"prenom": "Zhiqing", "nom": "Ning", "name": "NingZhiqing"}, {"prenom": "Hao", "nom": "Chen", "name": "ChenHao"}, {"prenom": "Hao", "nom": "Peng", "name": "PengHao"}, {"prenom": "Jiannong", "nom": "Cao", "name": "CaoJiannong"}, {"prenom": "Senzhang", "nom": "Wang", "name": "WangSenzhang"}, {"prenom": "Floriana", "nom": "Gargiulo", "name": "GargiuloFloriana"}, {"prenom": "Hao", "nom": "Yuan", "name": "YuanHao"}, {"prenom": "Xinning", "nom": "Zhu", "name": "ZhuXinning"}, {"prenom": "Alket", "nom": "Cecaj", "name": "CecajAlket"}, {"prenom": "Jing", "nom": "Yuan", "name": "YuanJing"}, {"prenom": "Marco", "nom": "Lippi", "name": "LippiMarco"}, {"prenom": "Sylvie", "nom": "Huet", "name": "HuetSylvie"}, {"prenom": "Xing", "nom": "Xie", "name": "XieXing"}, {"prenom": "Omar", "nom": "Baqueiro", "name": "BaqueiroOmar"}, {"prenom": "Nuria", "nom": "Oliver", "name": "OliverNuria"}, {"prenom": "Marco", "nom": "Mamei", "name": "MameiMarco"}, {"prenom": "Gianni", "nom": "Barlacchi", "name": "BarlacchiGianni"}, {"prenom": "Maxime", "nom": "Lenormand", "name": "LenormandMaxime"}, {"prenom": "Filippo", "nom": "Simini", "name": "SiminiFilippo"}, {"prenom": "Chujie", "nom": "Tian", "name": "TianChujie"}, {"prenom": "Michael", "nom": "Auli", "name": "AuliMichael"}, {"prenom": "Angela", "nom": "Fan", "name": "FanAngela"}, {"prenom": "Haoteng", "nom": "Yin", "name": "YinHaoteng"}, {"prenom": "Sergey", "nom": "Ioffe", "name": "IoffeSergey"}, {"prenom": "Kai", "nom": "Nagel", "name": "NagelKai"}, {"prenom": "Crowd", "nom": "Density", "name": "DensityCrowd"}, {"prenom": "Alexandre", "nom": "Bayen", "name": "BayenAlexandre"}, {"prenom": "Paolo", "nom": "Bajardi", "name": "BajardiPaolo"}, {"prenom": "Timothy", "nom": "Hunter", "name": "HunterTimothy"}, {"prenom": "Adeline", "nom": "Decuyper", "name": "DecuyperAdeline"}, {"prenom": "Renhe", "nom": "Jiang", "name": "JiangRenhe"}, {"prenom": "Pu", "nom": "Wang", "name": "WangPu"}, {"prenom": "Huaxiu", "nom": "Yao", "name": "YaoHuaxiu"}, {"prenom": "Junyang", "nom": "Qiu", "name": "QiuJunyang"}, {"prenom": "Gourab", "nom": "Ghoshal", "name": "GhoshalGourab"}, {"prenom": "Jonas", "nom": "Gehring", "name": "GehringJonas"}, {"prenom": "Wei", "nom": "Tao", "name": "TaoWei"}, {"prenom": "Michele", "nom": "Tizzoni", "name": "TizzoniMichele"}, {"prenom": "Thomas", "nom": "Louail", "name": "LouailThomas"}, {"prenom": "Marc", "nom": "Barthelemy", "name": "BarthelemyMarc"}, {"prenom": "Ronaldo", "nom": "Menezes", "name": "MenezesRonaldo"}, {"prenom": "Hugo", "nom": "Barbosa", "name": "BarbosaHugo"}, {"prenom": "Xin", "nom": "Liu", "name": "LiuXin"}, {"prenom": "New", "nom": "York", "name": "YorkNew"}, {"prenom": "Zbigniew", "nom": "Smoreda", "name": "SmoredaZbigniew"}, {"prenom": "Aleix", "nom": "Bassolas", "name": "BassolasAleix"}, {"prenom": "Katja", "nom": "Schechtner", "name": "SchechtnerKatja"}, {"prenom": "Vincent", "nom": "Blondel", "name": "BlondelVincent"}, {"prenom": "Denis", "nom": "Yarats", "name": "YaratsDenis"}, {"prenom": "Computing", "nom": "Machinery", "name": "MachineryComputing"}, {"prenom": "Kam", "nom": "King", "name": "KingKam"}], "url_in_text": ["unipi.it", "cnr.it", "https://doi.org/10.1145/nnnnnnn.nnnnnnn", "https://github.com/jonpappalord/", "ride.citibikenyc.com/system-data", "www.capitalbikeshare.com", "popfactfinder.planning.nyc.gov/", "https://doi.org/10.1080/13658816.2019.1652303", "doi.org/10.1007/s10489-020-01698-0", "https://doi.org/10", "https://doi.org/10.1038/srep01001", "http://arxiv.org/abs/1709.04875", "https://doi.org/10.1016/j.neucom.2020.04.124", "https://doi.org/10.1145/", "cs.AI", "https://doi.org/10.1016/j.physrep.2018.01.001", "https://doi.org/10.4337/9781784713591", "https://doi.org/10.3390/iot2010003", "cs.CL", "https://doi.org/10.1109/TITS.2019.2900481", "https://doi.org/10.18564/jasss.1964", "https://doi.org/10.1017/S0266466600009440", "https://doi.org/10.1016/S0895-7177(97)00050-", "https://science.sciencemag.org/content/313/5786/504.full.pdf", "https://doi.org/10.1126/science.1127647", "http://arxiv.org/abs/1609.02907", "doi.org/10.3141/1678-22", "https://doi.org/10.3141/1678-22", "https://doi.org/10.1016/j.jtrangeo.2015.12.008", "https://doi.org/10.1109/TITS.2020.3002718", "https://doi.org/10.1103/physreve.51.2909"], "doi_in_text": ["1701.02543", "1612.08083", "1609.02907", "1705.03122", "https://doi.org/10.3141/1678-22", "1909.02902", "2105.14956", "1907.07062", "https://science.sciencemag.org/content/313/5786/504.full.pdf", "1802.08714", "1502.03167", "1709.04875", "2012.00489", "1710.00004", "2201.02470"]}', '{"link": "http://arxiv.org/pdf/2203.06416v1", "doi": "2203.06416v1", "entities_include_in_text": ["Zha et al.\\n2021; Baker et al. 2019", "Vinyals et al. 2017; Lowe et al. 2017; Chen\\net al. 2019; Deka and Sycara 2021; Agarwal, Kumar, and\\nSycara 2019", "Zheng et al. 2018;\\nDiallo and Sugawara 2020; Rubenstein, Cornejo, and Nag-\\npal 2014", "Oliehoek and Amato 2016", "Oliehoek, Spaan, and Vlassis 2008; Kraemer and\\nBanerjee 2016", "Vaswani et al. 2017", "Vaswani et al. 2017", "Hoshen 2017; Iqbal and Sha 2019", "Agarwal,\\nKumar, and Sycara 2019; Jiang et al. 2018; Deka and Sycara\\n2021", "Zhou et al. 2021", "Shen et al. 2018", "Neishi and Yoshi-\\nnaga 2019", "Xu et al. 2015; Shen et al. 2018", "Williams\\n1992", "As-\\ntle and Scerif 2009", "Oliehoek\\nand Amato 2016", "Xu\\ne by selecting the top dc rows and\\n\\net al. 2015", "Sutton, Barto\\net al. 1998", "Schulman et al. 2015", "Zheng et al. 2018", "Schulman et al. 2017", "Ye et al. 2020", "Hoshen 2017", "Iqbal\\nand Sha 2019", "Agarwal,\\nKumar, and Sycara 2019", "Deka and Sycara 2021", "Lowe et al.\\n2017", "Watkins 1989", "Tampuu et al. 2017", "Sunehag et al.\\n2017", "Rashid et al. 2018", "Rashid\\net al. 2020", "Son et al. 2019", "Foerster et al. 2018", "Yang\\net al. 2020", "Vaswani et al. 2017", "Hoshen 2017;\\nIqbal and Sha 2019", "Scarselli et al. 2008", "Agarwal, Kumar, and Sycara 2019;\\nJiang et al. 2018; Deka and Sycara 2021", "Shen et al. 2018", "Vinyals et al. 2017; Usunier et al.\\n2016", "Lowe et al. 2017", "Iqbal and Sha 2019", "Baker\\net al. 2019", "Deka and\\nSycara 2021", "Zheng et al.\\n2018", "Lowe et al. 2017; Deka and\\nSycara 2021", "Schulman et al. 2017"], "entities_from_reference": [{"prenom": "E. A. O.", "nom": "Diallo", "name": "DialloE. A. O."}, {"prenom": "C. J. C.", "nom": "Watkins", "name": "WatkinsC. J. C."}, {"prenom": "A. S.", "nom": "Vezhnevets", "name": "VezhnevetsA. S."}, {"prenom": "A. G.", "nom": "Barto", "name": "BartoA. G."}, {"prenom": "R. S.", "nom": "Sutton", "name": "SuttonR. S."}, {"prenom": "J. Z.", "nom": "Leibo", "name": "LeiboJ. Z."}, {"prenom": "W. M.", "nom": "Czarnecki", "name": "CzarneckiW. M."}, {"prenom": "D. E.", "nom": "Astle", "name": "AstleD. E."}, {"prenom": "A. N.", "nom": "Gomez", "name": "GomezA. N."}, {"prenom": "R. J.", "nom": "Williams", "name": "WilliamsR. J."}, {"prenom": "K.", "nom": "Korjus", "name": "KorjusK."}, {"prenom": "G.", "nom": "Farquhar", "name": "FarquharG."}, {"prenom": "I.", "nom": "Mordatch", "name": "MordatchI."}, {"prenom": "R.", "nom": "Zemel", "name": "ZemelR."}, {"prenom": "D.", "nom": "Ye", "name": "YeD."}, {"prenom": "G.", "nom": "Chen", "name": "ChenG."}, {"prenom": "A.", "nom": "Alahi", "name": "AlahiA."}, {"prenom": "B.", "nom": "Shi", "name": "ShiB."}, {"prenom": "S.", "nom": "Zhang", "name": "ZhangS."}, {"prenom": "X.", "nom": "Hu", "name": "HuX."}, {"prenom": "Q.", "nom": "Guo", "name": "GuoQ."}, {"prenom": "G.", "nom": "Scerif", "name": "ScerifG."}, {"prenom": "Y.", "nom": "Hu", "name": "HuY."}, {"prenom": "M.", "nom": "Sun", "name": "SunM."}, {"prenom": "G.", "nom": "Powell", "name": "PowellG."}, {"prenom": "Y.", "nom": "Yang", "name": "YangY."}, {"prenom": "S.", "nom": "Bartunov", "name": "BartunovS."}, {"prenom": "A.", "nom": "Deka", "name": "DekaA."}, {"prenom": "T.", "nom": "Sugawara", "name": "SugawaraT."}, {"prenom": "B.", "nom": "Baker", "name": "BakerB."}, {"prenom": "B.", "nom": "Grew", "name": "GrewB."}, {"prenom": "S.", "nom": "Kumar", "name": "KumarS."}, {"prenom": "A.", "nom": "Courville", "name": "CourvilleA."}, {"prenom": "A.", "nom": "Agarwal", "name": "AgarwalA."}, {"prenom": "D.", "nom": "Zha", "name": "ZhaD."}, {"prenom": "K.", "nom": "Tuyls", "name": "TuylsK."}, {"prenom": "J.", "nom": "Wang", "name": "WangJ."}, {"prenom": "M.", "nom": "Yeo", "name": "YeoM."}, {"prenom": "N.", "nom": "Shazeer", "name": "ShazeerN."}, {"prenom": "S.", "nom": "Whiteson", "name": "WhitesonS."}, {"prenom": "J.", "nom": "Hao", "name": "HaoJ."}, {"prenom": "J.", "nom": "Li", "name": "LiJ."}, {"prenom": "I.", "nom": "Kanitscheider", "name": "KanitscheiderI."}, {"prenom": "R.", "nom": "Salakhudinov", "name": "SalakhudinovR."}, {"prenom": "J.", "nom": "Peng", "name": "PengJ."}, {"prenom": "X.", "nom": "Wu", "name": "WuX."}, {"prenom": "R.", "nom": "Vicente", "name": "VicenteR."}, {"prenom": "X.", "nom": "Lian", "name": "LianX."}, {"prenom": "T.", "nom": "Matiisen", "name": "MatiisenT."}, {"prenom": "H.", "nom": "Tang", "name": "TangH."}, {"prenom": "H.", "nom": "Wu", "name": "WuH."}, {"prenom": "L.", "nom": "Zheng", "name": "ZhengL."}, {"prenom": "K.", "nom": "Sycara", "name": "SycaraK."}, {"prenom": "A.", "nom": "Vaswani", "name": "VaswaniA."}, {"prenom": "I.", "nom": "Kuzovkin", "name": "KuzovkinI."}, {"prenom": "C.", "nom": "Fan", "name": "FanC."}, {"prenom": "T.", "nom": "Markov", "name": "MarkovT."}, {"prenom": "A.", "nom": "Makhzani", "name": "MakhzaniA."}, {"prenom": "M.", "nom": "Lanctot", "name": "LanctotM."}, {"prenom": "O.", "nom": "Vinyals", "name": "VinyalsO."}, {"prenom": "J.", "nom": "Ba", "name": "BaJ."}, {"prenom": "R.", "nom": "Kiros", "name": "KirosR."}, {"prenom": "N.", "nom": "Nardelli", "name": "NardelliN."}, {"prenom": "S.", "nom": "Chintala", "name": "ChintalaS."}, {"prenom": "T.", "nom": "Afouras", "name": "AfourasT."}, {"prenom": "C.", "nom": "Chen", "name": "ChenC."}, {"prenom": "W.", "nom": "Zhang", "name": "ZhangW."}, {"prenom": "A.", "nom": "Tampuu", "name": "TampuuA."}, {"prenom": "M.", "nom": "Jaderberg", "name": "JaderbergM."}, {"prenom": "G.", "nom": "Synnaeve", "name": "SynnaeveG."}, {"prenom": "Y.", "nom": "Wu", "name": "WuY."}, {"prenom": "J.", "nom": "Aru", "name": "AruJ."}, {"prenom": "J.", "nom": "Liu", "name": "LiuJ."}, {"prenom": "I.", "nom": "Polosukhin", "name": "PolosukhinI."}, {"prenom": "J.", "nom": "Schrittwieser", "name": "SchrittwieserJ."}, {"prenom": "N.", "nom": "Parmar", "name": "ParmarN."}, {"prenom": "J.", "nom": "Xie", "name": "XieJ."}, {"prenom": "T.", "nom": "Ewalds", "name": "EwaldsT."}, {"prenom": "J.", "nom": "Uszkoreit", "name": "UszkoreitJ."}, {"prenom": "N.", "nom": "Usunier", "name": "UsunierN."}, {"prenom": "P.", "nom": "Zhao", "name": "ZhaoP."}, {"prenom": "V.", "nom": "Zambaldi", "name": "ZambaldiV."}, {"prenom": "S.", "nom": "Yang", "name": "YangS."}, {"prenom": "Z.", "nom": "Liu", "name": "LiuZ."}, {"prenom": "Y.", "nom": "Liu", "name": "LiuY."}, {"prenom": "D.", "nom": "Kodelja", "name": "KodeljaD."}, {"prenom": "Y.", "nom": "Bengio", "name": "BengioY."}, {"prenom": "P.", "nom": "Sunehag", "name": "SunehagP."}, {"prenom": "N.", "nom": "Sonnerat", "name": "SonneratN."}, {"prenom": "A.", "nom": "Gruslys", "name": "GruslysA."}, {"prenom": "H.", "nom": "Cai", "name": "CaiH."}, {"prenom": "W.", "nom": "Ma", "name": "MaW."}, {"prenom": "H.", "nom": "Xiong", "name": "XiongH."}, {"prenom": "Y.", "nom": "Yu", "name": "YuY."}, {"prenom": "J.", "nom": "Foerster", "name": "FoersterJ."}, {"prenom": "S.", "nom": "Kreiss", "name": "KreissS."}, {"prenom": "H.", "nom": "Zhou", "name": "ZhouH."}, {"prenom": "K.", "nom": "Xu", "name": "XuK."}, {"prenom": "H.", "nom": "Yu", "name": "YuH."}, {"prenom": "P.", "nom": "Georgiev", "name": "GeorgievP."}, {"prenom": "J.", "nom": "Yang", "name": "YangJ."}, {"prenom": "Y.", "nom": "Chen", "name": "ChenY."}, {"prenom": "K.", "nom": "Cho", "name": "ChoK."}, {"prenom": "M.", "nom": "Zhou", "name": "ZhouM."}, {"prenom": "J.", "nom": "Agapiou", "name": "AgapiouJ."}, {"prenom": "L.", "nom": "Jones", "name": "JonesL."}, {"prenom": "Z.", "nom": "Lin", "name": "LinZ."}, {"prenom": "Z.", "nom": "Wei", "name": "WeiZ."}, {"prenom": "H.", "nom": "Kuttler", "name": "KuttlerH."}, {"prenom": "G.", "nom": "Lever", "name": "LeverG."}], "url_in_text": ["ac.cn", "www.aaai.org", "https://www.aaai.org/AAAI22Papers/AAAI-", "https://github.com/binary-husky/hmp2g/tree/aaai-conc"], "doi_in_text": ["2106.06135", "1909.07528", "1707.06347", "1609.02993", "1706.05296", "1801.10296", "1706.02275", "1708.04782", "1506.02438", "1906.01202", "1706.06122", "1810.09202"]}']
b = a[0]
c = json.loads(b)
print(type(c))
print(c['link'])